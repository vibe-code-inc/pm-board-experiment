---
description: Engineering and design principles for sustainable, maintainable, and high-quality code
globs: "*.{ts,tsx,js,jsx}"
alwaysApply: true
---

<rule>
  <meta>
    <title>Engineering and Design Principles</title>
    <description>Defines engineering and design principles for sustainable, maintainable, and high-quality code</description>
    <created-at utc-timestamp="1712678400">April 9, 2024, 10:00 AM EDT</created-at>
    <last-updated-at utc-timestamp="1712678400">April 9, 2024, 10:00 AM EDT</last-updated-at>
    <applies-to>
      <file-matcher glob="*.{ts,tsx}">TypeScript and React files</file-matcher>
      <file-matcher glob="*.{js,jsx}">JavaScript and React files</file-matcher>
      <file-matcher glob="*.specs.md">Specification files</file-matcher>
      <file-matcher glob="*.package_specs.md">Package specification files</file-matcher>
    </applies-to>
  </meta>
  <requirements>
    <non-negotiable priority="critical">
      <description>SPECIFICATION-FIRST DEVELOPMENT: All development MUST begin with writing specifications. No code should be written without an approved specification document.</description>
      <examples>
        <example title="Specification-First Approach">
          <correct-example title="Following specification-first workflow" conditions="Starting a new feature" expected-result="Specification created before implementation" correctness-criteria="Creates specification before writing code"><![CDATA[// CORRECT WORKFLOW:
// 1. Create a complete specification first
const newFeatureSpec = `
---
description: Task Filter Feature Specification
type: component
---

<specification>
  <meta>
    <title>Task Filter Component</title>
    <description>Allows filtering tasks by status, priority, and assignee</description>
    <!-- Meta details -->
  </meta>

  <overview>
    <description>The TaskFilter component enables users to filter task lists by multiple criteria.</description>
    <responsibility>Provide filtering UI controls and emit filter change events</responsibility>
  </overview>

  <!-- Additional specification sections -->
</specification>
`;

// 2. Only after specification is complete and approved, begin implementation
// 3. Implementation follows the specification exactly]]></correct-example>
          <incorrect-example title="Code-first approach" conditions="Starting a new feature" expected-result="Specification created before implementation" incorrectness-criteria="Writes code before specification"><![CDATA[// INCORRECT WORKFLOW:
// 1. Start by writing implementation code without a specification
const TaskFilter: React.FC = () => {
  const [statusFilter, setStatusFilter] = useState<string[]>([]);
  const [priorityFilter, setPriorityFilter] = useState<string[]>([]);

  // Implementation continues without clear requirements
  // ...
};

// 2. Maybe document what was built later (or never)
// 3. Result lacks clear requirements and boundaries]]></incorrect-example>
        </example>
      </examples>
    </non-negotiable>
    <non-negotiable priority="critical">
      <description>ALWAYS RESPECT THE SPECIFICATIONS. When specifications and engineering principles conflict, SPECIFICATIONS ALWAYS WIN.</description>
      <examples>
        <example title="Specification Primacy">
          <correct-example title="Following specifications exactly" conditions="When implementing features" expected-result="Code implements specification exactly" correctness-criteria="Follows specifications precisely"><![CDATA[// Specification states:
// "Use a class component with lifecycle methods for the UserProfile component"

// CORRECT IMPLEMENTATION:
class UserProfile extends React.Component<UserProfileProps, UserProfileState> {
  componentDidMount() {
    // Fetch user data
  }

  componentDidUpdate(prevProps: UserProfileProps) {
    // Check if user ID changed and refetch
  }

  render() {
    // Render user profile
  }
}]]></correct-example>
          <incorrect-example title="Deviating from specifications" conditions="When implementing features" expected-result="Code implements specification exactly" incorrectness-criteria="Chooses different approach than specification"><![CDATA[// Specification states:
// "Use a class component with lifecycle methods for the UserProfile component"

// INCORRECT IMPLEMENTATION:
// Choosing to use a function component with hooks instead
const UserProfile: React.FC<UserProfileProps> = (props) => {
  const [userData, setUserData] = useState<UserData | null>(null);

  useEffect(() => {
    // Fetch user data
  }, [props.userId]);

  return (
    // Render user profile
  );
};]]></incorrect-example>
        </example>
      </examples>
    </non-negotiable>
    <requirement priority="high">
      <description>When specification files CONTRADICT rules in this file or @conventions.mdc, the contradictory parts of the specification files are considered INVALID and must be updated.</description>
      <examples>
        <example title="Handling Specification Contradictions">
          <correct-example title="Updating contradictory specifications" conditions="When specifications contradict rules" expected-result="Specification is updated to match rules" correctness-criteria="Identifies and fixes contradiction"><![CDATA[// Rule states: "NEVER create index.ts barrel files"
// Specification incorrectly states: "Create an index.ts file to export all components"

// CORRECT APPROACH:
// 1. Identify the contradiction
// 2. Update the specification to remove the contradictory requirement:
//    "Export components directly from their individual files"
// 3. Implement according to the updated specification]]></correct-example>
          <incorrect-example title="Following contradictory specifications" conditions="When specifications contradict rules" expected-result="Specification is updated to match rules" incorrectness-criteria="Implements contradictory specification"><![CDATA[// Rule states: "NEVER create index.ts barrel files"
// Specification incorrectly states: "Create an index.ts file to export all components"

// INCORRECT APPROACH:
// 1. Ignore the rule
// 2. Implement according to the contradictory specification
// 3. Create index.ts barrel files as specified]]></incorrect-example>
        </example>
      </examples>
    </requirement>
    <non-negotiable priority="critical">
      <description>NEVER EVER create index.ts files just for re-exporting files. These barrel files are strictly prohibited.</description>
      <examples>
        <example title="Barrel File Prohibition">
          <correct-example title="Direct imports" conditions="Importing multiple components" expected-result="Imports directly from source files" correctness-criteria="Avoids barrel files"><![CDATA[// CORRECT APPROACH:
import { Button } from '@/components/button/button';
import { Input } from '@/components/input/input';
import { Select } from '@/components/select/select';]]></correct-example>
          <incorrect-example title="Using barrel files" conditions="Importing multiple components" expected-result="Imports directly from source files" incorrectness-criteria="Creates or uses barrel files"><![CDATA[// INCORRECT APPROACH:
// First creating a barrel file (index.ts):
export { Button } from './button';
export { Input } from './input';
export { Select } from './select';

// Then importing from the barrel:
import { Button, Input, Select } from '@/components';]]></incorrect-example>
        </example>
      </examples>
    </non-negotiable>
    <requirement priority="high">
      <description>Type casting using 'as' MUST be avoided. Use type guards, proper type assertions with narrowing, generics, or the 'satisfies' operator instead.</description>
      <examples>
        <example title="Type Safety">
          <correct-example title="Proper type handling" conditions="Dealing with unknown types" expected-result="Type-safe code without 'as'" correctness-criteria="Uses proper type safety techniques"><![CDATA[// Using type guards
function isUser(obj: unknown): obj is User {
  return obj !== null && typeof obj === 'object' && 'id' in obj;
}

const data = fetchData();
if (isUser(data)) {
  // data is now typed as User
  console.log(data.id);
}

// Using generics
function getItem<T>(items: T[], id: string): T | undefined {
  return items.find(item => item.id === id);
}

// Using satisfies
const config = { theme: 'dark', timeout: 1000 } satisfies AppConfig;]]></correct-example>
          <incorrect-example title="Unsafe type casting" conditions="Dealing with unknown types" expected-result="Type-safe code without 'as'" incorrectness-criteria="Uses unsafe type assertions"><![CDATA[// Unsafe type casting with 'as'
const user = data as User;
console.log(user.id); // Might fail at runtime

// Ignoring type errors
// @ts-ignore
const items = getItems();

// Using 'any' to bypass type checking
function processData(data: any) {
  return data.value;
}]]></incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>Follow the Single Responsibility Principle (SRP): Each component should have one and only one reason to change.</description>
      <examples>
        <example title="Single Responsibility">
          <correct-example title="Component with single responsibility" conditions="Designing components" expected-result="Focused components with clear responsibilities" correctness-criteria="Follows SRP"><![CDATA[// TaskCard component only responsible for displaying a task
const TaskCard: React.FC<TaskCardProps> = ({ task, onStatusChange }) => {
  return (
    <div className="task-card">
      <h3>{task.title}</h3>
      <p>{task.description}</p>
      <StatusSelector
        status={task.status}
        onChange={(status) => onStatusChange(task.id, status)}
      />
    </div>
  );
};

// Separate hook for data fetching logic
const useTaskData = (taskId: string) => {
  const [task, setTask] = useState<Task | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchTask = async () => {
      setLoading(true);
      const data = await taskService.getTask(taskId);
      setTask(data);
      setLoading(false);
    };

    fetchTask();
  }, [taskId]);

  return { task, loading };
};]]></correct-example>
          <incorrect-example title="Component with mixed responsibilities" conditions="Designing components" expected-result="Focused components with clear responsibilities" incorrectness-criteria="Violates SRP"><![CDATA[// TaskCard with too many responsibilities
const TaskCard: React.FC<TaskCardProps> = ({ taskId }) => {
  const [task, setTask] = useState<Task | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const router = useRouter();

  // Data fetching logic
  useEffect(() => {
    const fetchTask = async () => {
      setLoading(true);
      try {
        const data = await fetch(`/api/tasks/${taskId}`).then(res => res.json());
        setTask(data);
      } catch (err) {
        setError("Failed to load task");
      }
      setLoading(false);
    };

    fetchTask();
  }, [taskId]);

  // Status update logic
  const handleStatusChange = async (status: string) => {
    try {
      await fetch(`/api/tasks/${taskId}`, {
        method: 'PATCH',
        body: JSON.stringify({ status })
      });
      setTask(prev => prev ? { ...prev, status } : null);
    } catch (err) {
      setError("Failed to update status");
    }
  };

  // Navigation logic
  const navigateToUserProfile = () => {
    router.push(`/users/${task?.assignedTo}`);
  };

  // Rendering with multiple responsibilities
  if (loading) return <div>Loading...</div>;
  if (error) return <div>{error}</div>;
  if (!task) return <div>Task not found</div>;

  return (
    <div className="task-card">
      {isEditing ? (
        <TaskForm task={task} onSave={(updatedTask) => {
          setTask(updatedTask);
          setIsEditing(false);
        }} />
      ) : (
        <>
          <h3>{task.title}</h3>
          <p>{task.description}</p>
          <select
            value={task.status}
            onChange={(e) => handleStatusChange(e.target.value)}
          >
            <option value="todo">To Do</option>
            <option value="in-progress">In Progress</option>
            <option value="done">Done</option>
          </select>
          <button onClick={() => setIsEditing(true)}>Edit</button>
          <button onClick={navigateToUserProfile}>View Assignee</button>
        </>
      )}
    </div>
  );
};]]></incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>Follow the Open/Closed Principle (OCP): Components should be open for extension but closed for modification.</description>
      <examples>
        <example title="Open/Closed Principle">
          <correct-example title="Component open for extension" conditions="Designing extensible components" expected-result="Extensible design without modification" correctness-criteria="Follows OCP"><![CDATA[// Button component designed to be extended through props
type ButtonProps = {
  variant?: 'primary' | 'secondary' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  icon?: React.ReactNode;
  onClick?: () => void;
  className?: string;
  children: React.ReactNode;
} & React.ButtonHTMLAttributes<HTMLButtonElement>;

export const Button: React.FC<ButtonProps> = ({
  variant = 'primary',
  size = 'md',
  icon,
  onClick,
  className,
  children,
  ...rest
}) => {
  const baseStyles = "rounded font-medium transition-colors";
  const variantStyles = {
    primary: "bg-blue-500 text-white hover:bg-blue-600",
    secondary: "bg-gray-200 text-gray-800 hover:bg-gray-300",
    ghost: "bg-transparent text-gray-800 hover:bg-gray-100"
  };
  const sizeStyles = {
    sm: "px-2 py-1 text-sm",
    md: "px-4 py-2",
    lg: "px-6 py-3 text-lg"
  };

  return (
    <button
      className={`${baseStyles} ${variantStyles[variant]} ${sizeStyles[size]} ${className || ''}`}
      onClick={onClick}
      {...rest}
    >
      {icon && <span className="mr-2">{icon}</span>}
      {children}
    </button>
  );
};

// Using the component with different extensions:
<Button>Default Button</Button>
<Button variant="secondary" size="sm">Small Secondary Button</Button>
<Button icon={<Icon name="settings" />}>Button with Icon</Button>
<Button className="w-full" disabled>Custom Styled Button</Button>]]></correct-example>
          <incorrect-example title="Component requiring modification" conditions="Designing extensible components" expected-result="Extensible design without modification" incorrectness-criteria="Violates OCP"><![CDATA[// Button component with hardcoded variants
export const Button = ({ onClick, children }) => {
  return (
    <button
      className="bg-blue-500 text-white rounded px-4 py-2 hover:bg-blue-600"
      onClick={onClick}
    >
      {children}
    </button>
  );
};

// To add a new variant, we need to modify the Button component:
export const SecondaryButton = ({ onClick, children }) => {
  return (
    <button
      className="bg-gray-200 text-gray-800 rounded px-4 py-2 hover:bg-gray-300"
      onClick={onClick}
    >
      {children}
    </button>
  );
};

// And again for another variant:
export const GhostButton = ({ onClick, children }) => {
  return (
    <button
      className="bg-transparent text-gray-800 rounded px-4 py-2 hover:bg-gray-100"
      onClick={onClick}
    >
      {children}
    </button>
  );
};]]></incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>Follow the Interface Segregation Principle (ISP): Clients should not be forced to depend on interfaces they don't use.</description>
      <examples>
        <example title="Interface Segregation">
          <correct-example title="Focused interfaces" conditions="Designing component interfaces" expected-result="Small, focused interfaces" correctness-criteria="Follows ISP"><![CDATA[// Segregated, focused interfaces
type FormFieldProps = {
  name: string;
  label: string;
};

type TextInputProps = FormFieldProps & {
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
};

type CheckboxProps = FormFieldProps & {
  checked: boolean;
  onChange: (checked: boolean) => void;
};

// Components use only the props they need
export const TextInput: React.FC<TextInputProps> = ({
  name, label, value, onChange, placeholder
}) => {
  return (
    <div>
      <label htmlFor={name}>{label}</label>
      <input
        id={name}
        name={name}
        type="text"
        value={value}
        onChange={(e) => onChange(e.target.value)}
        placeholder={placeholder}
      />
    </div>
  );
};

export const Checkbox: React.FC<CheckboxProps> = ({
  name, label, checked, onChange
}) => {
  return (
    <div>
      <label htmlFor={name}>
        <input
          id={name}
          name={name}
          type="checkbox"
          checked={checked}
          onChange={(e) => onChange(e.target.checked)}
        />
        {label}
      </label>
    </div>
  );
};]]></correct-example>
          <incorrect-example title="Monolithic interface" conditions="Designing component interfaces" expected-result="Small, focused interfaces" incorrectness-criteria="Violates ISP"><![CDATA[// Large, monolithic interface that forces dependencies
type FormInputProps = {
  name: string;
  label: string;
  type: 'text' | 'checkbox' | 'select' | 'radio' | 'textarea';
  value: string | boolean | string[];
  onChange: (value: any) => void;
  placeholder?: string;
  options?: Array<{ value: string; label: string }>;
  multiple?: boolean;
  disabled?: boolean;
  required?: boolean;
  min?: number;
  max?: number;
  pattern?: string;
  rows?: number;
  cols?: number;
  autoFocus?: boolean;
  className?: string;
};

// Component has to handle all possible input types
export const FormInput: React.FC<FormInputProps> = (props) => {
  const {
    name, label, type, value, onChange,
    placeholder, options, multiple, disabled,
    required, min, max, pattern, rows, cols,
    autoFocus, className
  } = props;

  switch (type) {
    case 'text':
      return (
        <div>
          <label htmlFor={name}>{label}</label>
          <input
            id={name}
            name={name}
            type="text"
            value={value as string}
            onChange={(e) => onChange(e.target.value)}
            placeholder={placeholder}
            disabled={disabled}
            required={required}
            min={min}
            max={max}
            pattern={pattern}
            autoFocus={autoFocus}
            className={className}
          />
        </div>
      );
    case 'checkbox':
      return (
        <div>
          <label htmlFor={name}>
            <input
              id={name}
              name={name}
              type="checkbox"
              checked={value as boolean}
              onChange={(e) => onChange(e.target.checked)}
              disabled={disabled}
              required={required}
              autoFocus={autoFocus}
              className={className}
            />
            {label}
          </label>
        </div>
      );
    // And so on for other input types...
    default:
      return null;
  }
};]]></incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>Follow the Dependency Inversion Principle (DIP): High-level modules should not depend on low-level modules. Both should depend on abstractions.</description>
      <examples>
        <example title="Dependency Inversion">
          <correct-example title="Using dependency injection" conditions="Handling dependencies" expected-result="Loose coupling through abstractions" correctness-criteria="Follows DIP"><![CDATA[// Define abstraction (interface) for the service
type TaskService = {
  getTasks: () => Promise<Task[]>;
  createTask: (task: Omit<Task, 'id'>) => Promise<Task>;
  updateTask: (id: string, updates: Partial<Task>) => Promise<Task>;
  deleteTask: (id: string) => Promise<void>;
};

// High-level component depends on abstraction, not implementation
const TaskList: React.FC<{ taskService: TaskService }> = ({ taskService }) => {
  const [tasks, setTasks] = useState<Task[]>([]);

  useEffect(() => {
    const fetchTasks = async () => {
      const data = await taskService.getTasks();
      setTasks(data);
    };

    fetchTasks();
  }, [taskService]);

  const handleCreateTask = async (newTask: Omit<Task, 'id'>) => {
    const created = await taskService.createTask(newTask);
    setTasks([...tasks, created]);
  };

  return (
    <div>
      <TaskForm onSubmit={handleCreateTask} />
      {tasks.map(task => (
        <TaskItem
          key={task.id}
          task={task}
          onUpdate={(updates) => taskService.updateTask(task.id, updates)}
          onDelete={() => taskService.deleteTask(task.id)}
        />
      ))}
    </div>
  );
};

// Implementation provided by dependency injection
const App = () => {
  // Could be swapped with different implementations
  const apiTaskService: TaskService = {
    getTasks: () => fetch('/api/tasks').then(res => res.json()),
    createTask: (task) => fetch('/api/tasks', {
      method: 'POST',
      body: JSON.stringify(task)
    }).then(res => res.json()),
    updateTask: (id, updates) => fetch(`/api/tasks/${id}`, {
      method: 'PATCH',
      body: JSON.stringify(updates)
    }).then(res => res.json()),
    deleteTask: (id) => fetch(`/api/tasks/${id}`, {
      method: 'DELETE'
    }).then(() => {})
  };

  return <TaskList taskService={apiTaskService} />;
};]]></correct-example>
          <incorrect-example title="Direct dependency on implementation" conditions="Handling dependencies" expected-result="Loose coupling through abstractions" incorrectness-criteria="Violates DIP"><![CDATA[// TaskList directly depends on implementation details
import { apiClient } from '@/services/api_client';

const TaskList: React.FC = () => {
  const [tasks, setTasks] = useState<Task[]>([]);

  useEffect(() => {
    const fetchTasks = async () => {
      // Direct dependency on apiClient implementation
      const data = await apiClient.get('/tasks');
      setTasks(data);
    };

    fetchTasks();
  }, []);

  const handleCreateTask = async (newTask: Omit<Task, 'id'>) => {
    // Direct dependency on apiClient implementation
    const created = await apiClient.post('/tasks', newTask);
    setTasks([...tasks, created]);
  };

  const handleUpdateTask = async (id: string, updates: Partial<Task>) => {
    // Direct dependency on apiClient implementation
    await apiClient.patch(`/tasks/${id}`, updates);
    setTasks(tasks.map(task =>
      task.id === id ? { ...task, ...updates } : task
    ));
  };

  const handleDeleteTask = async (id: string) => {
    // Direct dependency on apiClient implementation
    await apiClient.delete(`/tasks/${id}`);
    setTasks(tasks.filter(task => task.id !== id));
  };

  return (
    <div>
      <TaskForm onSubmit={handleCreateTask} />
      {tasks.map(task => (
        <TaskItem
          key={task.id}
          task={task}
          onUpdate={(updates) => handleUpdateTask(task.id, updates)}
          onDelete={() => handleDeleteTask(task.id)}
        />
      ))}
    </div>
  );
};]]></incorrect-example>
        </example>
      </examples>
    </requirement>
  </requirements>
  <references>
    <reference as="dependency" href=".cursor/rules/rules.mdc" reason="Follows standard rule format">Base rule format definition</reference>
    <reference as="dependency" href=".cursor/rules/conventions.mdc" reason="Related to project conventions">Project coding conventions</reference>
    <reference as="dependency" href=".cursor/rules/specifications.mdc" reason="Related to specification handling">Specification format and development practices</reference>
  </references>
</rule>
