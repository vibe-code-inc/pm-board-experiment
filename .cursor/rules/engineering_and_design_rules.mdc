// Engineering and Design Rules
// This rule file defines engineering and design principles for sustainable, maintainable, and high-quality code.
// CRITICAL NOTE: These principles are ALWAYS subordinate to specifications (@specifications.mdc) and conventions (@conventions.mdc).

// ====================================================
// SPECIFICATION PRIMACY - MOST IMPORTANT RULE
// ====================================================

// 1. ALWAYS RESPECT THE SPECIFICATIONS. This rule supersedes all other engineering principles.
// 2. Implement code based on the specifications EXACTLY as they are defined.
// 3. Follow ALL requirements from specifications PRECISELY and COMPLETELY.
// 4. NEVER deviate from specifications, even when engineering principles suggest otherwise.
// 5. When specifications and engineering principles conflict, SPECIFICATIONS ALWAYS WIN.
// 6. ALWAYS refer to @specifications.mdc for the definitive rules on specification creation, discovery, and compliance.

// CORRECT vs INCORRECT Examples:
// CORRECT:
//   ✓ Following the exact component structure defined in specifications
//   ✓ Implementing all behavior specified in the spec, even if it seems redundant
//   ✓ Using the exact naming conventions and interfaces as defined in the specs
// INCORRECT:
//   ✗ "Improving" on specifications by changing the design without approval
//   ✗ Omitting required functionality because it seems unnecessary
//   ✗ Changing interface definitions from what's specified in the specs

// ====================================================
// CODE ORGANIZATION PRINCIPLES
// ====================================================

// 1. Prefer carefully rewriting existing code rather than solving a problem simply by generating more and more code.
// 2. If a file gets too big anyway, consider refactoring (BUT ALWAYS RESPECT SPECIFICATIONS as defined in @specifications.mdc).
// 3. Prefer modularity in general - break down complex functionality into smaller, focused components.
// 4. ALWAYS follow project conventions defined in @conventions.mdc.
// 5. Build reasonable abstractions that balance flexibility and simplicity.
// 6. Keep files and components relatively small, but NEVER refactor solely based on file size if it contradicts specifications.
// 7. Follow the project structure and file naming conventions defined in @conventions.mdc.
// 8. Follow the specification creation, discovery, and update workflow exactly as defined in @specifications.mdc.

// CORRECT vs INCORRECT Examples:
// CORRECT:
//   ✓ Refactoring a 300-line component into smaller sub-components with clear responsibilities
//   ✓ Optimizing existing code paths before adding new ones
//   ✓ Consolidating duplicate logic into shared utilities
//   ✓ Following the file structure defined in specifications exactly
// INCORRECT:
//   ✗ Adding more and more code to solve new requirements without revisiting existing architecture
//   ✗ Creating components that try to do too many things
//   ✗ Refactoring code when specifications explicitly require the current structure
//   ✗ Breaking specifications to achieve "cleaner" code

// ====================================================
// SOLID PRINCIPLES - COMPREHENSIVE IMPLEMENTATION
// ====================================================

// These principles MUST be followed when designing and implementing components, BUT ONLY WHEN they align with specifications.
// For guidance on how to apply SOLID principles to specifications themselves, refer to the "SOLID PRINCIPLES IN SPECIFICATIONS"
// section in @specifications.mdc.

// 1. SINGLE RESPONSIBILITY PRINCIPLE (SRP):
//    Each component/module/class should have one and only one reason to change.
//    - Components should have a single, well-defined responsibility
//    - Avoid mixing unrelated concerns in the same component
//    - When a component handles multiple responsibilities, extract them into separate components
//    - However, NEVER violate specifications for the sake of SRP

// CORRECT vs INCORRECT SRP Examples:
// CORRECT:
//   ✓ A TaskCard component that only displays task information and handles its UI interactions
//   ✓ Separating API data fetching into a dedicated service or hook
//   ✓ Extracting validation logic into a separate validator module
// INCORRECT:
//   ✗ A UserProfile component that also handles authentication, navigation, and data fetching
//   ✗ A utility function that both formats data and makes API calls
//   ✗ Breaking a component into smaller parts when specifications require it to be a single unit

// 2. OPEN/CLOSED PRINCIPLE (OCP):
//    Components should be open for extension but closed for modification.
//    - Design components that can be extended without modifying their source code
//    - Use composition, props, and dependency injection to modify behavior
//    - Allow for customization through well-defined extension points
//    - But ALWAYS validate extensions against specifications

// CORRECT vs INCORRECT OCP Examples:
// CORRECT:
//   ✓ A Button component that accepts render props for custom content
//   ✓ A Table component that can be extended with custom cell renderers
//   ✓ Using strategy pattern for pluggable behaviors as specified in specs
// INCORRECT:
//   ✗ Hardcoding behaviors that will likely need to change
//   ✗ Using internal if/else logic instead of accepting strategy components
//   ✗ Modifying core component code for feature-specific behavior

// 3. LISKOV SUBSTITUTION PRINCIPLE (LSP):
//    Subtypes must be substitutable for their base types without altering the correctness of the program.
//    - Child components should maintain the interface of parent components
//    - Specialized components should not break expectations set by base components
//    - When extending a component, preserve its core behavior
//    - But NEVER violate specifications in pursuit of LSP

// CORRECT vs INCORRECT LSP Examples:
// CORRECT:
//   ✓ A PrimaryButton that behaves the same as a Button with different styling
//   ✓ A specialized DataTable that supports all the same props as a regular Table
//   ✓ A FormInput that can be used anywhere a base Input is expected
// INCORRECT:
//   ✗ A PrimaryButton that ignores the onClick handler expected by Button
//   ✗ A specialized component that changes the expected prop behavior
//   ✗ Adding unexpected side effects to extended components

// 4. INTERFACE SEGREGATION PRINCIPLE (ISP):
//    Clients should not be forced to depend on interfaces they don't use.
//    - Break large interfaces into smaller, more focused ones
//    - Components should only require props they actually use
//    - Prefer multiple specific interfaces over one general interface
//    - But NEVER contradict interface definitions in specifications

// CORRECT vs INCORRECT ISP Examples:
// CORRECT:
//   ✓ Splitting Form component props into validation, submission, and layout interfaces
//   ✓ Using specific prop types like ButtonProps, IconButtonProps instead of a generic Props
//   ✓ Creating focused custom hooks that only expose what's needed
// INCORRECT:
//   ✗ Creating components that require many unused props
//   ✗ Large, monolithic interfaces with many unrelated properties
//   ✗ Breaking specified interfaces into smaller ones without updating specifications

// 5. DEPENDENCY INVERSION PRINCIPLE (DIP):
//    High-level modules should not depend on low-level modules. Both should depend on abstractions.
//    - Components should receive services/utilities as props or context
//    - Use dependency injection to provide implementations
//    - Avoid importing concrete implementations directly in components
//    - But NEVER break specifications to implement dependency inversion

// CORRECT vs INCORRECT DIP Examples:
// CORRECT:
//   ✓ A DataTable receiving a data fetching function rather than calling an API directly
//   ✓ Using context to provide service implementations throughout the app
//   ✓ Injecting logger, API client, and other dependencies as specified
// INCORRECT:
//   ✗ Hardcoding API calls inside components
//   ✗ Direct imports of concrete implementations instead of using abstractions
//   ✗ Changing the dependency structure defined in specifications

// 6. MINIMAL INTERFACE PRINCIPLE:
//    Components should expose the smallest possible public API needed for their functionality.
//    - Implement the bare minimum needed to fulfill the specifications
//    - Avoid speculative features or "nice-to-haves" not in specifications
//    - Only expose what's necessary for the component to function

// CORRECT vs INCORRECT MINIMAL INTERFACE Examples:
// CORRECT:
//   ✓ A Button component that only exposes essential props like "onClick" and "children"
//   ✓ Implementing exactly what the specifications require, no more
//   ✓ Keeping component APIs focused on their specific purpose
// INCORRECT:
//   ✗ Adding extra props "just in case" they might be needed later
//   ✗ Implementing features not specified in requirements
//   ✗ Creating overly complex APIs with unnecessary flexibility

// ====================================================
// TYPE SYSTEM USAGE
// ====================================================

// 1. Use types instead of interfaces for most cases, as specified in @conventions.mdc.
// 2. Only use interfaces when:
//    a. You're defining a contract that will be implemented by a class
//    b. You need declaration merging
//    c. You're working with multiple implementations of the same contract
// 3. Prefer union types with string literals over enums.
// 4. Use explicit type annotations for function parameters and return values.
// 5. ALWAYS use explicit type annotations as required by @conventions.mdc.
// 6. Follow the type conventions in @conventions.mdc exactly.

// CORRECT vs INCORRECT Examples:
// CORRECT:
//   ✓ type TaskStatus = 'todo' | 'in-progress' | 'done';
//   ✓ type TaskPriority = 'low' | 'medium' | 'high';
//   ✓ interface TaskService { /* methods that will be implemented by a class */ }
//   ✓ type Task = { /* task properties */ };
//   ✓ const [project, setProject] = useState<Project>(initialProject); // Following conventions
//   ✓ const handleTaskUpdate = (taskId: string, newStatus: Task['status']) => {...}
// INCORRECT:
//   ✗ enum TaskStatus { TODO, IN_PROGRESS, DONE }
//   ✗ using 'any' instead of specific types
//   ✗ const [project, setProject] = useState(initialProject); // Missing explicit type annotation
//   ✗ const handleTaskUpdate = (taskId, newStatus) => {...} // Missing type annotations
//   ✗ interface Task { /* task properties */ } // Using interface when a type is more appropriate

// ====================================================
// STATE AND VARIABLE MANAGEMENT
// ====================================================

// 1. Extract hardcoded values into constants files as specified in @conventions.mdc.
// 2. Use constants where reasonable, especially for values that might change in the future.
// 3. Do not use global variables - prefer proper scoping and dependency injection.
// 4. Use dependency injection where reasonable to improve testability and flexibility.
// 5. When state needs to be shared between components, ALWAYS make this sharing explicit by:
//    a. Extracting shared state into a dedicated state class or controller
//    b. Using an existing suitable shared dependency where appropriate
//    c. Ensuring the state management approach adheres to SOLID principles
//    d. Documenting the state sharing pattern in specifications
// 6. Follow state management conventions in @conventions.mdc, including:
//    a. Using useState for component-level state
//    b. Using callbacks for state updates

// CORRECT vs INCORRECT Examples:
// CORRECT:
//   ✓ import { PROJECT_ID, TASK_IDS } from '@/constants/ids';
//   ✓ id: PROJECT_ID.WEBSITE_REDESIGN
//   ✓ import { COLORS } from '@/ui/theme/colors';
//   ✓ const priorityColors = COLORS.priority;
//   ✓ import { BUTTON_STYLES } from '@/ui/base/design_kit/button/button_styles';
//   ✓ function TaskList({ taskService }: { taskService: TaskService }) { /* ... */ }
//   ✓ const [isEditing, setIsEditing] = useState(false);
//   ✓ const handleTaskUpdate = (updatedTask: Task) => { setTask(updatedTask); };
// INCORRECT:
//   ✗ id: '1'
//   ✗ id: 'website-redesign'
//   ✗ const highPriorityColor = '#FF0000';
//   ✗ let globalTaskList = []; // Global variable
//   ✗ let isEditing = false; // Mutable variable instead of state
//   ✗ const handleTaskUpdate = () => { task.status = 'completed'; setTask(task); }; // Mutating state directly

// ====================================================
// CODE QUALITY AND PERFORMANCE
// ====================================================

// 1. Optimize for quality and performance but ALWAYS RESPECT SPECIFICATIONS.
// 2. When making assumptions (rather than relying on facts), mention this in the relevant specification and in code comments.
// 3. Prefer simplicity and readability over clever solutions.
// 4. Be careful with performance optimizations and make sure they're actually needed before implementing them.
// 5. When specifications and performance considerations conflict, ALWAYS prioritize specifications.
// 6. Follow the BARE MINIMUM IMPLEMENTATION principle from @specifications.mdc:
//    - Both specifications and code must do only the bare minimum needed to fulfill their purpose
//    - Specifications should only require what is absolutely necessary for the component to function
//    - Code should only include what directly fulfills the specification requirements
//    - Avoid speculative features, "nice-to-haves," or premature optimizations

// CORRECT vs INCORRECT Examples:
// CORRECT:
//   ✓ // Assuming tasks are sorted by priority from the API (see task_service.specs.md)
//   ✓ Using memoization for expensive computations when justified
//   ✓ Breaking complex logic into well-named helper functions
//   ✓ Implementing performance optimizations exactly as specified
//   ✓ Implementing only what the specifications require
// INCORRECT:
//   ✗ Premature optimizations without measurement
//   ✗ Overly complex solutions that are hard to understand
//   ✗ Optimizing for performance when specifications explicitly require a different approach
//   ✗ Making unspecified "improvements" to performance that change behavior
//   ✗ Adding features not required by specifications

// ====================================================
// ALIGNMENT WITH SPECIFICATIONS - EXEMPLARY PRACTICES
// ====================================================

// 1. Start by reading ALL relevant specifications thoroughly:
//    - Package specs (e.g., task_board.package_specs.md)
//    - Individual component specs (e.g., task_card.specs.md)
// 2. Follow the specification discovery process in @specifications.mdc:
//    a. Check if there's a `<folder_basename>.package_specs.md` file in the target folder - READ IT FIRST
//    b. Check if there's a `<file_name_without_extension>.specs.md` file in the same folder - READ IT NEXT
//    c. Only proceed with code modifications after understanding all specifications
// 3. Implement ALL requirements specified, EXACTLY as they are defined.
// 4. Follow the exact interfaces, props, and behaviors defined in specs.
// 5. Do not add unspecified features or behaviors without updating specs first.
// 6. Do not remove or modify specified behavior without spec changes.
// 7. When something is ambiguous, refer to existing code patterns or seek clarification.
// 8. Follow the specification creation, discovery, and update workflow as defined in @specifications.mdc.

// CORRECT vs INCORRECT Examples:
// CORRECT:
//   ✓ Implementing a component with exactly the props defined in its spec
//   ✓ Following the behavior description in specs precisely
//   ✓ Using the exact data structures and types defined in specs
//   ✓ Updating specifications before changing implementation
// INCORRECT:
//   ✗ Adding "helpful" features not mentioned in specifications
//   ✗ Changing behavior from what's defined in specs for "better UX"
//   ✗ Renaming props or interfaces from what's defined in specs
//   ✗ Implementing only part of what's required in specifications

// ====================================================
// COMPONENT CONVENTIONS
// ====================================================

// 1. Follow the component conventions defined in @conventions.mdc exactly.
// 2. Use function component syntax with React.FC and explicit props type as specified in @conventions.mdc.
// 3. Keep components focused and extract complex logic as shown in the examples in @conventions.mdc.
// 4. Use event handler conventions from @conventions.mdc, including:
//    a. Prefixing event handlers with 'handle'
//    b. Using explicit event types
// 5. Follow the CSS & styling conventions in @conventions.mdc, including:
//    a. Using className with Tailwind CSS utilities
//    b. Using the cn utility for conditional classes
// 6. Use destructuring for props as shown in the examples in @conventions.mdc.

// ====================================================
// IMPORTANT REMINDERS
// ====================================================

// 1. NEVER commit without explicit permission, triple confirmation, and following the exact rules in @commits.mdc.
// 2. ALWAYS maintain alignment with specifications defined in @specifications.mdc.
// 3. ALWAYS follow project conventions in @conventions.mdc.
// 4. Be cautious when modifying existing code - understand the impact before making changes.
// 5. Remember that code is read much more often than it is written - optimize for readability.
// 6. NEVER make engineering decisions that contradict specifications or conventions.
// 7. PREVENT REGRESSIONS. Ensure all changes preserve existing functionality unless specifications explicitly require changes.
// 8. ALWAYS DOUBLE-CHECK, TRIPLE-CHECK THAT THE CODE THAT IS SAVED IN FILES IMPLEMENTS SPECIFICATIONS.

// ====================================================
// DECISION MAKING HIERARCHY
// ====================================================

// When making engineering and design decisions, follow this priority order:
// 1. SPECIFICATIONS (as defined in @specifications.mdc) - these must be respected above all else
// 2. PROJECT CONVENTIONS (as defined in @conventions.mdc)
// 3. CODE QUALITY PRINCIPLES (as defined in this file)
// 4. PERFORMANCE CONSIDERATIONS
// 5. DEVELOPER CONVENIENCE

// The higher priority item always takes precedence when there's a conflict.
// This means specifications ALWAYS override any engineering principles in this document.
// If engineering principles suggest one approach but specifications require another, ALWAYS follow specifications.

// ====================================================
// VALID VS INVALID APPROACH EXAMPLES
// ====================================================

/*
// VALID APPROACH:
1. Task: Add a new feature to TaskCard
2. First steps:
   a. Check for task_board.package_specs.md and read it first
   b. Check for task_card.specs.md and read it thoroughly
   c. Read the project conventions in @conventions.mdc
3. Implementation aligns exactly with specifications:
   - Uses the interface defined in specs
   - Implements all required behavior
   - Follows conventions as required
   - Makes engineering decisions that respect specs
4. Result: Code that perfectly matches specifications

// INVALID APPROACH:
1. Task: Add a new feature to TaskCard
2. Problem: Skip reading specifications or read incompletely
3. Implementation issues:
   - Partially implements requirements
   - Changes interfaces without updating specs
   - Refactors structure in ways that contradict specs
   - Makes engineering "improvements" that deviate from specs
4. Result: Code that fails to implement specifications correctly
*/
