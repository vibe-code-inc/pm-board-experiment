---
description: The required rules for formatting and handling commits
globs: "*"
alwaysApply: true
---

<rule>
  <meta>
    <title>Conventional Commits</title>
    <description>Enforces the Conventional Commits 1.0.0 specification for commit messages, ensuring a structured and consistent commit history</description>
    <created-at utc-timestamp="1712678400">April 9, 2024, 10:00 AM EDT</created-at>
    <last-updated-at utc-timestamp="1712678400">April 9, 2024, 10:00 AM EDT</last-updated-at>
    <applies-to>
      <file-matcher glob="*">All files in the workspace</file-matcher>
      <action-matcher action="git-commit">Triggered when creating git commits</action-matcher>
    </applies-to>
  </meta>
  <requirements>
    <non-negotiable priority="critical">
      <description>NEVER COMMIT WITHOUT EXPLICIT PERMISSION. This is the most important rule and supersedes everything else.</description>
      <examples>
        <example title="Commit Permission">
          <correct-example title="Proper handling of commit requests" conditions="User mentions committing code" expected-result="AI asks for explicit permission" correctness-criteria="Requests explicit permission before committing"><![CDATA[User: "We need to update this file and commit it"
AI: "I'll update the file. Before committing, I need your explicit permission. Would you like me to commit after making these changes?"
User: "Yes, please commit"
AI: "To confirm, you want me to commit these changes now? Please respond with 'Yes' to proceed."
User: "Yes"
AI: (proceeds with commit)]]></correct-example>
          <incorrect-example title="Committing without permission" conditions="User mentions committing code" expected-result="AI asks for explicit permission" incorrectness-criteria="Commits without explicit permission"><![CDATA[User: "We need to update this file and commit it"
AI: "I've updated the file and committed the changes."]]></incorrect-example>
        </example>
      </examples>
    </non-negotiable>
    <requirement priority="critical">
      <description>Commit messages MUST be prefixed with a type, followed by optional scope, optional `!`, and required terminal colon and space.</description>
      <examples>
        <example title="Commit Message Format">
          <correct-example title="Proper commit message format" conditions="Creating a commit message" expected-result="Properly formatted message" correctness-criteria="Follows the required format"><![CDATA[feat: add new user authentication feature
fix(auth): resolve token expiration issues
docs: update README with new installation instructions
feat(api)!: change response format]]></correct-example>
          <incorrect-example title="Improper commit message format" conditions="Creating a commit message" expected-result="Properly formatted message" incorrectness-criteria="Fails to follow required format"><![CDATA[update user authentication
fixed bug
feat:missing space after colon]]></incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="critical">
      <description>The type `feat` MUST be used when adding a new feature (correlates with MINOR in SemVer).</description>
      <examples>
        <example title="Feature Commits">
          <correct-example title="Proper feature commit" conditions="Adding a new feature" expected-result="Commit with feat type" correctness-criteria="Uses feat type for new features"><![CDATA[feat: add user authentication with OAuth
feat(auth): implement Google login]]></correct-example>
          <incorrect-example title="Improper feature commit" conditions="Adding a new feature" expected-result="Commit with feat type" incorrectness-criteria="Uses incorrect type for new features"><![CDATA[add: user authentication with OAuth
update: implement Google login]]></incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="critical">
      <description>The type `fix` MUST be used when fixing a bug (correlates with PATCH in SemVer).</description>
      <examples>
        <example title="Bug Fix Commits">
          <correct-example title="Proper bug fix commit" conditions="Fixing a bug" expected-result="Commit with fix type" correctness-criteria="Uses fix type for bug fixes"><![CDATA[fix: correct calculation error
fix(auth): resolve token expiration issues]]></correct-example>
          <incorrect-example title="Improper bug fix commit" conditions="Fixing a bug" expected-result="Commit with fix type" incorrectness-criteria="Uses incorrect type for bug fixes"><![CDATA[bugfix: correct calculation error
update: fixed authentication issue]]></incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>Breaking changes MUST be indicated either with `!` before the colon or as a `BREAKING CHANGE:` footer.</description>
      <examples>
        <example title="Breaking Change Indication">
          <correct-example title="Properly marked breaking changes" conditions="Making breaking changes" expected-result="Clearly marked breaking changes" correctness-criteria="Uses ! or footer to indicate breaking changes"><![CDATA[feat(api)!: change response format

fix: update authentication flow

BREAKING CHANGE: The API now returns JSON instead of XML]]></correct-example>
          <incorrect-example title="Improperly marked breaking changes" conditions="Making breaking changes" expected-result="Clearly marked breaking changes" incorrectness-criteria="Fails to indicate breaking changes"><![CDATA[feat(api): change response format from XML to JSON

fix: update authentication flow completely]]></incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>When using lists in the commit body, list items MUST be separated by only one newline. DO NOT add blank lines between list items.</description>
      <examples>
        <example title="List Formatting">
          <correct-example title="Proper list formatting" conditions="Including lists in commit body" expected-result="List with single line breaks" correctness-criteria="Uses single newlines between list items"><![CDATA[fix(i18n): correct strings.ts files to follow guidelines

- Add missing parameters to string functions
- Fix ICU variable references in templates
- Remove unused imports
- Update JSDoc comments to document new parameters]]></correct-example>
          <incorrect-example title="Improper list formatting" conditions="Including lists in commit body" expected-result="List with single line breaks" incorrectness-criteria="Uses blank lines between list items"><![CDATA[fix(i18n): correct strings.ts files to follow guidelines

- Add missing parameters to string functions

- Fix ICU variable references in templates

- Remove unused imports

- Update JSDoc comments to document new parameters]]></incorrect-example>
        </example>
      </examples>
    </requirement>
    <non-negotiable priority="critical">
      <description>ALWAYS REVIEW EVERY SINGLE LINE OF CODE BEFORE COMMITTING. Run `git --no-pager diff HEAD` before writing commit messages to review ALL changes line by line.</description>
      <examples>
        <example title="Code Review Before Commit">
          <correct-example title="Proper pre-commit review" conditions="Before committing changes" expected-result="Complete review of all changes" correctness-criteria="Reviews all changes before committing"><![CDATA[// First check all changes
git --no-pager diff HEAD

// Carefully review EVERY line of code

// Then stage files
git add path/to/changed/files

// Verify exactly what will be committed
git --no-pager diff --staged

// Only then create a commit with an accurate message
git commit -m "feat: add user authentication feature"]]></correct-example>
          <incorrect-example title="Skipping pre-commit review" conditions="Before committing changes" expected-result="Complete review of all changes" incorrectness-criteria="Commits without reviewing changes"><![CDATA[// Stage files without checking changes
git add .

// Commit without verifying what's being committed
git commit -m "update authentication"]]></incorrect-example>
        </example>
      </examples>
    </non-negotiable>
    <non-negotiable priority="critical">
      <description>NEVER leave relevant changes unstaged. ALWAYS check for ANY unstaged files that might be part of the same logical change.</description>
      <examples>
        <example title="Complete Change Inclusion">
          <correct-example title="Including all relevant changes" conditions="Before committing" expected-result="Complete logical change in commit" correctness-criteria="Includes all related files"><![CDATA[// Check for all changed files
git status

// Look for related changes that should be included
git --no-pager diff

// Stage ALL related files for a complete logical change
git add file1.ts file2.ts test/file1.test.ts

// Verify staged changes
git --no-pager diff --staged

// Commit with all relevant files included
git commit -m "feat: implement user profile page"]]></correct-example>
          <incorrect-example title="Leaving out related changes" conditions="Before committing" expected-result="Complete logical change in commit" incorrectness-criteria="Misses related files"><![CDATA[// Stage only some files without checking what else changed
git add file1.ts

// Commit with incomplete changes
git commit -m "feat: implement user profile page"

// Later realize other files were part of the same change
git add file2.ts test/file1.test.ts
git commit -m "feat: finish user profile implementation"]]></incorrect-example>
        </example>
      </examples>
    </non-negotiable>
  </requirements>
  <grammar>
    <grammar-entry title="Commit Message Structure">
      <pattern description="Valid commit message format">^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert|config|rule|spec)(\([a-z0-9-]+\))?(!)?:\s.+$</pattern>
      <example description="Valid feature commit">feat(auth): add OAuth authentication</example>
      <example description="Valid bug fix commit">fix: correct calculation error</example>
      <example description="Valid breaking change commit">feat(api)!: change response format</example>
    </grammar-entry>
  </grammar>
  <references>
    <reference as="dependency" href=".cursor/rules/rules.mdc" reason="Follows standard rule format">Base rule format definition</reference>
    <reference as="dependency" href=".cursor/rules/never_commit.mdc" reason="Related to commit permissions">Never commit without permission rule</reference>
  </references>
</rule>
