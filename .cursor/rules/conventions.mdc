---
description: Required project conventions
globs: "*.{ts,tsx,js,jsx}"
alwaysApply: true
---

<rule>
  <meta>
    <title>Project Conventions</title>
    <description>Defines coding conventions for the project that must be followed by all code and specifications</description>
    <created-at utc-timestamp="1712678400">April 9, 2024, 10:00 AM EDT</created-at>
    <last-updated-at utc-timestamp="1712678400">April 9, 2024, 10:00 AM EDT</last-updated-at>
    <applies-to>
      <file-matcher glob="*.{ts,tsx}">TypeScript and React files</file-matcher>
      <file-matcher glob="*.{js,jsx}">JavaScript and React files</file-matcher>
      <file-matcher glob="*.specs.md">Specification files</file-matcher>
      <file-matcher glob="*.package_specs.md">Package specification files</file-matcher>
    </applies-to>
  </meta>
  <requirements>
    <non-negotiable priority="critical">
      <description>NO IMPLEMENTATION WITHOUT SPECIFICATION: Every implementation MUST have a corresponding specification document. Code without a specification MUST NOT exist.</description>
      <examples>
        <example title="Implementation with Specification">
          <correct-example title="Proper implementation process" conditions="Creating new components" expected-result="Specification exists before implementation" correctness-criteria="Has specification before implementation"><![CDATA[// CORRECT APPROACH:
// 1. First, create task_filter.specs.md with complete specification
// 2. Reference the specification when implementing
// File: src/components/task_filter/task_filter.tsx
/**
 * Implementation of the Task Filter component
 * @see specification: src/components/task_filter/task_filter.specs.md
 */

import { useState } from 'react';
import { cn } from '@/lib/utils';
import { FilterOption } from '@/types';

type TaskFilterProps = {
  onChange: (filters: FilterState) => void;
};

export const TaskFilter: React.FC<TaskFilterProps> = ({ onChange }) => {
  // Implementation following the specification
};]]></correct-example>
          <incorrect-example title="Implementation without specification" conditions="Creating new components" expected-result="Specification exists before implementation" incorrectness-criteria="Lacks specification"><![CDATA[// INCORRECT APPROACH:
// File: src/components/task_filter/task_filter.tsx
// No corresponding specification document exists

import { useState } from 'react';

// Implementation lacks reference to any specification
export const TaskFilter = ({ onChange }) => {
  const [statusFilter, setStatusFilter] = useState([]);

  // Ad-hoc implementation without specification guidance
};]]></incorrect-example>
        </example>
      </examples>
    </non-negotiable>
    <non-negotiable priority="critical">
      <description>ALL specification files MUST COMPLY with ALL conventions in this file. When a specification file CONTRADICTS any convention, the contradictory part is considered INVALID and must be updated.</description>
      <examples>
        <example title="Specification Compliance">
          <correct-example title="Compliant specification" conditions="Creating a specification" expected-result="Specification follows conventions" correctness-criteria="Aligns with all project conventions"><![CDATA[# TaskList Component Specification

## Overview
The TaskList component displays a list of tasks.

## Technical Requirements
- File should be named task_list.tsx (snake_case)
- Component should use absolute imports with @/ prefix
- Component should use React.FC with explicit props type]]></correct-example>
          <incorrect-example title="Non-compliant specification" conditions="Creating a specification" expected-result="Specification follows conventions" incorrectness-criteria="Contradicts project conventions"><![CDATA[# TaskList Component Specification

## Overview
The TaskList component displays a list of tasks.

## Technical Requirements
- File should be named TaskList.tsx (PascalCase)
- Component should use relative imports
- Component should use function syntax without React.FC]]></incorrect-example>
        </example>
      </examples>
    </non-negotiable>
    <requirement priority="high">
      <description>Use snake_case for all file and directory names.</description>
      <examples>
        <example title="File and Directory Naming">
          <correct-example title="Proper snake_case naming" conditions="Creating files and directories" expected-result="Names follow snake_case convention" correctness-criteria="Uses snake_case correctly"><![CDATA[project_board.tsx
task_list.tsx
utils.ts
task_card/
design_kit/]]></correct-example>
          <incorrect-example title="Improper naming conventions" conditions="Creating files and directories" expected-result="Names follow snake_case convention" incorrectness-criteria="Uses other conventions instead of snake_case"><![CDATA[ProjectBoard.tsx
taskList.tsx
TaskList.tsx
task-card/
DesignKit/]]></incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>Use absolute imports with @/ prefix.</description>
      <examples>
        <example title="Import Statements">
          <correct-example title="Proper absolute imports" conditions="Importing modules" expected-result="Imports use absolute paths with @/ prefix" correctness-criteria="Uses absolute imports with @/ prefix"><![CDATA[import { Button } from '@/ui/base/design_kit/button/button';
import { Task } from '@/types';
import { cn } from '@/lib/utils';]]></correct-example>
          <incorrect-example title="Improper relative imports" conditions="Importing modules" expected-result="Imports use absolute paths" incorrectness-criteria="Uses relative paths"><![CDATA[import { Button } from '../../ui/base/design_kit/button/button';
import { Task } from '../types';
import { cn } from './utils';]]></incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="medium">
      <description>Extract hardcoded values into constants files.</description>
      <examples>
        <example title="Constants Usage">
          <correct-example title="Properly extracted constants" conditions="Using constant values" expected-result="Values are in constant files" correctness-criteria="Uses imported constants"><![CDATA[import { PROJECT_ID, TASK_IDS } from '@/constants/ids';
import { COLORS } from '@/ui/theme/colors';

const TaskCard = () => {
  return (
    <div id={PROJECT_ID.WEBSITE_REDESIGN}>
      <span className={COLORS.priority.high}>High Priority</span>
    </div>
  );
};]]></correct-example>
          <incorrect-example title="Hardcoded values" conditions="Using constant values" expected-result="Values are in constant files" incorrectness-criteria="Uses inline hardcoded values"><![CDATA[const TaskCard = () => {
  return (
    <div id="website-redesign">
      <span className="bg-red-500 text-white">High Priority</span>
    </div>
  );
};]]></incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>Use types instead of interfaces for most cases, except when defining a contract for class implementation, needing declaration merging, or working with multiple implementations of the same contract.</description>
      <examples>
        <example title="Type Definitions">
          <correct-example title="Proper type usage" conditions="Defining data structures" expected-result="Uses types for data models" correctness-criteria="Uses types for data structures"><![CDATA[type Task = {
  id: string;
  title: string;
  status: 'todo' | 'in-progress' | 'done';
};

type ButtonProps = {
  variant?: 'primary' | 'secondary' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
} & React.ButtonHTMLAttributes<HTMLButtonElement>;

// Interface for a service contract that will have implementations
interface TaskService {
  getTasks(): Promise<Task[]>;
  createTask(task: Omit<Task, 'id'>): Promise<Task>;
}]]></correct-example>
          <incorrect-example title="Improper interface usage" conditions="Defining data structures" expected-result="Uses types for data models" incorrectness-criteria="Uses interfaces for simple data structures"><![CDATA[interface Task {
  id: string;
  title: string;
  status: 'todo' | 'in-progress' | 'done';
}

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
}]]></incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="medium">
      <description>Use explicit type annotations when defining state and function parameters.</description>
      <examples>
        <example title="Type Annotations">
          <correct-example title="Proper type annotations" conditions="Defining state and functions" expected-result="Explicit type annotations" correctness-criteria="Includes explicit type annotations"><![CDATA[const [project, setProject] = useState<Project>(initialProject);
const handleTaskUpdate = (taskId: string, newStatus: Task['status']) => {
  // implementation
};]]></correct-example>
          <incorrect-example title="Missing type annotations" conditions="Defining state and functions" expected-result="Explicit type annotations" incorrectness-criteria="Relies on type inference"><![CDATA[const [project, setProject] = useState(initialProject);
const handleTaskUpdate = (taskId, newStatus) => {
  // implementation
};]]></incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>Use function component syntax with React.FC and explicit props type.</description>
      <examples>
        <example title="Component Definition">
          <correct-example title="Proper component syntax" conditions="Defining React components" expected-result="Uses React.FC with explicit props" correctness-criteria="Uses recommended component syntax"><![CDATA[type ButtonProps = {
  variant?: 'primary' | 'secondary' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
} & React.ButtonHTMLAttributes<HTMLButtonElement>;

export const Button: React.FC<ButtonProps> = ({
  children,
  className,
  variant = 'primary',
  size = 'md',
  ...props
}) => {
  // Component implementation
};]]></correct-example>
          <incorrect-example title="Improper component syntax" conditions="Defining React components" expected-result="Uses React.FC with explicit props" incorrectness-criteria="Uses function declaration without React.FC"><![CDATA[interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
}

export const Button = (props) => {
  const { children, className, variant = 'primary', size = 'md', ...rest } = props;
  // Component implementation
};]]></incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="medium">
      <description>Prefix event handlers with 'handle'.</description>
      <examples>
        <example title="Event Handler Naming">
          <correct-example title="Proper handler naming" conditions="Creating event handlers" expected-result="Handlers are prefixed with 'handle'" correctness-criteria="Uses 'handle' prefix"><![CDATA[const handleSubmit = (e: React.FormEvent) => {
  e.preventDefault();
  onSave(task);
};

const handleDragStart = (e: React.DragEvent) => {
  e.dataTransfer.setData('taskId', task.id);
};]]></correct-example>
          <incorrect-example title="Improper handler naming" conditions="Creating event handlers" expected-result="Handlers are prefixed with 'handle'" incorrectness-criteria="Lacks 'handle' prefix"><![CDATA[const submitForm = (e: React.FormEvent) => {
  e.preventDefault();
  onSave(task);
};

const dragStart = (e: React.DragEvent) => {
  e.dataTransfer.setData('taskId', task.id);
};]]></incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="medium">
      <description>Use className with Tailwind CSS utilities for styling components.</description>
      <examples>
        <example title="Component Styling">
          <correct-example title="Proper Tailwind usage" conditions="Styling components" expected-result="Uses Tailwind CSS classes" correctness-criteria="Uses className with Tailwind utilities"><![CDATA[<div className="p-4 rounded-lg shadow-sm bg-gray-100 transition-all hover:shadow-md">
  <h3 className="font-semibold text-gray-800">{task.title}</h3>
</div>]]></correct-example>
          <incorrect-example title="Inline styles" conditions="Styling components" expected-result="Uses Tailwind CSS classes" incorrectness-criteria="Uses inline styles"><![CDATA[<div style={{ padding: '1rem', borderRadius: '0.5rem', backgroundColor: '#f3f4f6' }}>
  <h3 style={{ fontWeight: 600, color: '#1f2937' }}>{task.title}</h3>
</div>]]></incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="medium">
      <description>Use cn utility for conditional classes.</description>
      <examples>
        <example title="Conditional Class Names">
          <correct-example title="Using cn utility" conditions="Combining class names" expected-result="Uses cn utility" correctness-criteria="Properly uses cn for class composition"><![CDATA[import { cn } from '@/lib/utils';

<button
  className={cn(
    baseStyles,
    variants[variant],
    sizes[size],
    className
  )}
  {...props}
>
  {children}
</button>]]></correct-example>
          <incorrect-example title="String concatenation" conditions="Combining class names" expected-result="Uses cn utility" incorrectness-criteria="Uses string template literals"><![CDATA[<button
  className={`${baseStyles} ${variants[variant]} ${sizes[size]} ${className}`}
  {...props}
>
  {children}
</button>]]></incorrect-example>
        </example>
      </examples>
    </requirement>
  </requirements>
  <references>
    <reference as="dependency" href=".cursor/rules/rules.mdc" reason="Follows standard rule format">Base rule format definition</reference>
    <reference as="dependency" href=".cursor/rules/engineering_and_design_rules.mdc" reason="Supports engineering principles">Engineering and design principles</reference>
    <reference as="dependency" href=".cursor/rules/specifications.mdc" reason="Ensures specification consistency">Specification format and requirements</reference>
  </references>
</rule>
