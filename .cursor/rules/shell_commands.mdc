---
description: Rules for generating, executing, and managing shell commands
globs: "*"
alwaysApply: true
---

<rule>
  <meta>
    <title>Shell Commands Best Practices</title>
    <description>Enforces best practices for generating, executing, and managing shell commands to ensure safety, reliability, and proper execution</description>
    <created-at utc-timestamp="1712678400">April 9, 2024, 10:00 AM EDT</created-at>
    <last-updated-at utc-timestamp="1712678400">April 9, 2024, 10:00 AM EDT</last-updated-at>
    <applies-to>
      <file-matcher glob="*">All files in the workspace</file-matcher>
      <action-matcher action="run-command">Triggered when generating or executing shell commands</action-matcher>
    </applies-to>
  </meta>
  <requirements>
    <requirement priority="high">
      <description>When generating a shell command to execute, ensure each line ends with a backslash (\) to properly escape newlines.</description>
      <examples>
        <example title="Multiline Command Continuation">
          <correct-example title="Proper backslash continuation" conditions="Writing a multiline command" expected-result="Command executes as a single unit" correctness-criteria="Uses backslash at end of each line"><![CDATA[find . -type f -name "*.js" \
  -exec grep -l "function" {} \; \
  | xargs wc -l]]></correct-example>
          <incorrect-example title="Missing backslash continuation" conditions="Writing a multiline command" expected-result="Command executes as a single unit" incorrectness-criteria="Missing backslashes for continuation"><![CDATA[find . -type f -name "*.js"
  -exec grep -l "function" {} \;
  | xargs wc -l]]></incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>Always escape special characters in file paths and variable names to prevent unexpected behavior.</description>
      <examples>
        <example title="Special Character Escaping">
          <correct-example title="Properly escaped special characters" conditions="Command with special characters" expected-result="Command works with special characters" correctness-criteria="Escapes special characters properly"><![CDATA[grep "class\ User" ./src/models/user.js]]></correct-example>
          <incorrect-example title="Unescaped special characters" conditions="Command with special characters" expected-result="Command works with special characters" incorrectness-criteria="Lacks proper escaping"><![CDATA[grep "class User" ./src/models/user.js]]></incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
      <description>Use double quotes around variables to prevent word splitting and globbing.</description>
      <examples>
        <example title="Variable Quoting">
          <correct-example title="Properly quoted variables" conditions="Using variables in commands" expected-result="Variables are properly expanded" correctness-criteria="Uses double quotes around variables"><![CDATA[find . -name "${PATTERN}" -type f]]></correct-example>
          <incorrect-example title="Unquoted variables" conditions="Using variables in commands" expected-result="Variables are properly expanded" incorrectness-criteria="Lacks quotes around variables"><![CDATA[find . -name $PATTERN -type f]]></incorrect-example>
        </example>
      </examples>
    </requirement>
    <non-negotiable priority="critical">
      <description>NEVER create temporary files for git commit messages or other operations. Use direct methods like inline strings with proper escaping instead.</description>
      <examples>
        <example title="Git Commit Message Handling">
          <correct-example title="Direct commit message" conditions="Creating a commit with message" expected-result="Commit with proper message without temp files" correctness-criteria="Uses inline string for commit message"><![CDATA[git commit -m $'fix(auth): resolve login issues\n\n- Fix token validation\n- Improve error handling']]></correct-example>
          <incorrect-example title="Using temporary file" conditions="Creating a commit with message" expected-result="Commit without temp files" incorrectness-criteria="Creates a temporary file for the message"><![CDATA[echo "fix(auth): resolve login issues

- Fix token validation
- Improve error handling" > /tmp/commit_msg.txt
git commit -F /tmp/commit_msg.txt
rm /tmp/commit_msg.txt]]></incorrect-example>
        </example>
      </examples>
    </non-negotiable>
    <non-negotiable priority="critical">
      <description>When removing or modifying a file outside git control, or doing so in any irreversible manner, ask for user confirmation first.</description>
      <examples>
        <example title="Destructive Operations">
          <correct-example title="With user confirmation" conditions="Removing files" expected-result="Confirmation before deletion" correctness-criteria="Requires explicit user approval"><![CDATA[run_terminal_cmd({
  command: "rm -rf ./build",
  explanation: "Removing build directory to prepare for clean build",
  is_background: false,
  require_user_approval: true
})]]></correct-example>
          <incorrect-example title="Without user confirmation" conditions="Removing files" expected-result="Confirmation before deletion" incorrectness-criteria="Lacks user approval requirement"><![CDATA[run_terminal_cmd({
  command: "rm -rf ./build",
  explanation: "Removing build directory",
  is_background: false,
  require_user_approval: false
})]]></incorrect-example>
        </example>
      </examples>
    </non-negotiable>
    <requirement priority="high">
      <description>Prefer "${VAR}" over "$VAR" for clearer variable boundaries, especially in complex strings.</description>
      <examples>
        <example title="Variable Boundary Clarity">
          <correct-example title="Clear variable boundaries" conditions="Using variables in complex strings" expected-result="Proper variable expansion" correctness-criteria="Uses braces around variable names"><![CDATA[echo "User ${USERNAME} has ${PERMISSION_COUNT} permissions"]]></correct-example>
          <incorrect-example title="Ambiguous variable boundaries" conditions="Using variables in complex strings" expected-result="Proper variable expansion" incorrectness-criteria="Lacks braces around variables"><![CDATA[echo "User $USERNAME has $PERMISSION_COUNT permissions"]]></incorrect-example>
        </example>
      </examples>
    </requirement>
    <non-negotiable priority="critical">
      <description>ALWAYS include the --no-pager parameter in ALL git commands that query data.</description>
      <examples>
        <example title="Git Command Paging">
          <correct-example title="Preventing pager activation" conditions="Viewing git history" expected-result="Output displays without paging" correctness-criteria="Includes --no-pager option"><![CDATA[git --no-pager log -n 5 --oneline]]></correct-example>
          <incorrect-example title="Missing no-pager option" conditions="Viewing git history" expected-result="Output displays without paging" incorrectness-criteria="Omits --no-pager option"><![CDATA[git log -n 5 --oneline]]></incorrect-example>
        </example>
      </examples>
    </non-negotiable>
    <requirement priority="high">
      <description>When using `git diff`, ALWAYS compare against the previous commit explicitly using `git --no-pager diff HEAD` to ensure proper context.</description>
      <examples>
        <example title="Git Diff Reference">
          <correct-example title="Explicit HEAD reference" conditions="Viewing changes" expected-result="Complete diff against HEAD" correctness-criteria="Explicitly references HEAD"><![CDATA[git --no-pager diff HEAD]]></correct-example>
          <incorrect-example title="Missing HEAD reference" conditions="Viewing changes" expected-result="Complete diff against HEAD" incorrectness-criteria="Lacks explicit HEAD reference"><![CDATA[git --no-pager diff]]></incorrect-example>
        </example>
      </examples>
    </requirement>
    <non-negotiable priority="critical">
      <description>NEVER EXECUTE GIT COMMIT COMMANDS without triple confirmation from the user.</description>
      <examples>
        <example title="Git Commit Authorization">
          <correct-example title="Proper commit authorization" conditions="User requests a commit" expected-result="AI confirms before committing" correctness-criteria="Requires explicit confirmation"><![CDATA[User: "Let's commit these changes"
AI: "I need your explicit permission before committing. Would you like me to commit now?"
User: "Yes"
AI: "To confirm, you want me to commit these changes now? Please respond with 'Yes' to proceed."
User: "Yes"
AI: (proceeds with commit)]]></correct-example>
          <incorrect-example title="Unauthorized commit" conditions="User mentions commits" expected-result="AI confirms before committing" incorrectness-criteria="Commits without explicit authorization"><![CDATA[User: "Let's commit these changes later"
AI: "I've gone ahead and committed the changes."]]></incorrect-example>
        </example>
      </examples>
    </non-negotiable>
    <requirement priority="medium">
      <description>When running commands that might trigger oh-my-zsh update prompts, always include instructions to decline the update (type N).</description>
      <examples>
        <example title="Oh-My-Zsh Update Handling">
          <correct-example title="Declining oh-my-zsh updates" conditions="Sourcing zsh configuration" expected-result="Configuration sourced without updates" correctness-criteria="Includes instruction to decline updates"><![CDATA[echo N | zsh -c 'source ~/.zshrc']]></correct-example>
          <incorrect-example title="Accepting oh-my-zsh updates" conditions="Sourcing zsh configuration" expected-result="Configuration sourced without updates" incorrectness-criteria="Accepts updates automatically"><![CDATA[echo Y | zsh -c 'source ~/.zshrc']]></incorrect-example>
        </example>
      </examples>
    </requirement>
  </requirements>
  <grammar>
    <grammar-entry title="Command Structure">
      <pattern description="Valid run_terminal_cmd structure">run_terminal_cmd\(\{\s*command:\s*"[^"]+",\s*explanation:\s*"[^"]+",\s*is_background:\s*(true|false),\s*require_user_approval:\s*(true|false)\s*\}\)</pattern>
      <example description="Properly structured command call">run_terminal_cmd({
  command: "ls -la",
  explanation: "Listing all files with details",
  is_background: false,
  require_user_approval: true
})</example>
    </grammar-entry>
  </grammar>
  <references>
    <reference as="dependency" href=".cursor/rules/rules.mdc" reason="Follows standard rule format">Base rule format definition</reference>
    <reference as="dependency" href=".cursor/rules/never_commit.mdc" reason="Related to git commit safety">Never commit without permission rule</reference>
  </references>
</rule>
